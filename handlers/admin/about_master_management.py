import sqlalchemy
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from filters import IsAdmin
from data import AboutMaster, Document
from handlers.fsm import ManageSection, ManageDocuments
from keyboards.menus import get_admin_about_master_menu_keyboard, get_start_keyboard
import asyncio
router = Router()
router.callback_query.filter(IsAdmin())
router.message.filter(IsAdmin())


@router.callback_query(F.data == 'manageabout')
async def manage_services(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=get_admin_about_master_menu_keyboard())


@router.callback_query(F.data.startswith('manage_'), F.data!='manage_diplomas')
async def manage(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    data = callback.data.split('_')[1]
    await state.update_data(section=data)
    await callback.message.delete()
    buttons = [[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='backtoadminaboutmastermenu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    request = sqlalchemy.select(AboutMaster).filter(AboutMaster.name == data).limit(1)
    result = list(await session.scalars(request))
    if result:
        await callback.message.answer('–°–µ–π—á–∞—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:')
        await callback.bot.copy_message(chat_id=callback.from_user.id, message_id=result[0].message_id,
                                        from_chat_id=result[0].chat_id)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É",
                                  reply_markup=keyboard)
    await state.set_state(ManageSection.message)


@router.message(ManageSection.message)
async def override(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    info = AboutMaster(name=data['section'], message_id=message.message_id, chat_id=message.chat.id)
    await session.merge(info)
    await session.commit()
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
    await message.bot.copy_message(from_chat_id=message.chat.id, chat_id=message.chat.id, message_id=message.message_id)
    await state.clear()


@router.callback_query(F.data == 'manage_diplomas')
async def manage_diplomas(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    buttons = [[types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", callback_data='adddocs')],
               [types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data='deletedocs')],
               [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='backtoadminaboutmastermenu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)


@router.callback_query(F.data == 'adddocs')
async def add_docs(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    buttons = [[types.KeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å')]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤—Å–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª"
                                  " '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –î–∏–ø–ª–æ–º—ã & –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã'. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É"
                                  " –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ó–∞–≤–µ—à–∏—Ç—å'", reply_markup=keyboard)
    await state.set_state(ManageDocuments.add_documents)


@router.message(ManageDocuments.add_documents, F.photo)
async def retrieve_docs(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])
    photos.append(message.message_id)
    await state.update_data(photos=photos)


@router.message(ManageDocuments.add_documents, F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å')
async def finish(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    try:
        for i in data['photos']:
            doc = Document(chat_id=message.chat.id, message_id=i)
            session.add(doc)
        await session.commit()
        await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ {len(data['photos'])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', reply_markup=get_start_keyboard())
    except KeyError:
        await message.answer('–ù–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=get_start_keyboard())
    await state.clear()


@router.callback_query(F.data == 'deletedocs')
async def delete_docs(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    request = sqlalchemy.select(Document)
    buttons = [[types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é‚Ü©Ô∏è", callback_data='backtoadminaboutmastermenu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    result = list(await session.scalars(request))
    buttons = [[types.KeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å')]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ"
                                  "–Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'",
                                  reply_markup=keyboard)
    await asyncio.sleep(2)
    for i in result:
        buttons = [[types.InlineKeyboardButton(text='üóëÔ∏è', callback_data=f'deletedocument_{i.id}')]]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.bot.copy_message(message_id=i.message_id, from_chat_id=i.chat_id, chat_id=callback.message.chat.id,
                                        reply_markup=keyboard)
        await asyncio.sleep(0.05)
    await state.set_state(ManageDocuments.delete_documents)


@router.callback_query(F.data.startswith('deletedocument_'), ManageDocuments.delete_documents)
async def add_docs_to_list(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    docs = data.get('docs', [])
    id = int(callback.data.split('_')[1])
    if id in docs:
        docs.remove(id)
        buttons = [[types.InlineKeyboardButton(text='üóëÔ∏è', callback_data=callback.data)]]
    else:
        docs.append(id)
        buttons = [[types.InlineKeyboardButton(text='üóëÔ∏è‚úÖ', callback_data=callback.data)]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await state.update_data(docs=docs)
    await callback.message.edit_reply_markup(reply_markup=keyboard)


@router.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å", ManageDocuments.delete_documents)
async def finish_deleting_docs(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    try:
        for i in data['docs']:
            request = sqlalchemy.delete(Document).filter(Document.id == i)
            await session.execute(request)
        await session.commit()
        await message.answer(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ({len(data['docs'])}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", reply_markup=get_start_keyboard())
    except KeyError:
        await message.answer("–ù–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω", reply_markup=get_start_keyboard())
    await state.clear()

